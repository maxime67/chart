# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

## @section Global parameters

global:
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## @param global.imageRegistry Global Docker Image registry
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  ##
  imageRegistry: ""
  imagePullSecrets: []
  ## @param global.defaultStorageClass Global default StorageClass for Persistent Volume(s)
  ##
  defaultStorageClass: ""
  ## Security parameters
  ## @param global.security.allowInsecureImages Allows skipping image verification
  ##
  security:
    allowInsecureImages: true
  ## Compatibility adaptations for Kubernetes platforms
  ##
  compatibility:
    ## Compatibility adaptations for Openshift
    ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
    ##
    openshift:
      adaptSecurityContext: auto
    ## @param global.compatibility.omitEmptySeLinuxOptions If set to true, removes the seLinuxOptions from the securityContexts when it is set to an empty object
    ##
    omitEmptySeLinuxOptions: false

## @section Common parameters

## @param kubeVersion Override Kubernetes version reported by .Capabilities
##
kubeVersion: ""
## @param apiVersions Override Kubernetes API versions reported by .Capabilities
##
apiVersions: []
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param namespaceOverride String to fully override common.names.namespace
##
namespaceOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local

## Diagnostic mode
## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
## @param diagnosticMode.command Command to override all containers in the chart release
## @param diagnosticMode.args Args to override all containers in the chart release
##
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
## @param useHelmHooks Enable use of Helm hooks if needed, e.g. on post-install jobs
##
useHelmHooks: true
## @param usePasswordFiles Mount credentials as files instead of using environment variables
##
usePasswordFiles: true

## @section Keycloak parameters

## Bitnami Keycloak image version
## ref: https://hub.docker.com/r/bitnami/keycloak/tags/
## @param image.registry [default: REGISTRY_NAME] Keycloak image registry
## @param image.repository [default: REPOSITORY_NAME/keycloak] Keycloak image repository
## @skip image.tag Keycloak image tag (immutable tags are recommended)
## @param image.digest Keycloak image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
## @param image.pullPolicy Keycloak image pull policy
## @param image.pullSecrets Keycloak image pull secrets
## @param image.debug Enable Keycloak image debug mode
##
image:
  registry: docker.io
  repository: maxxa/bitnami-keycloak
  tag: 26
  digest: ""
  ## Specify a imagePullPolicy
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  debug: true
## Keycloak authentication parameters
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
##
auth:
  username: keycloak
  password: keycloak
  database: keycloak
  ## @param auth.adminUser Keycloak administrator user
  ##
  adminUser: su
  ## @param auth.adminPassword Keycloak administrator password for the new user
  ##
  adminPassword: "su"
  ## @param auth.existingSecret Existing secret containing Keycloak admin password
  ##
  existingSecret: ""
  ## @param auth.passwordSecretKey Key where the Keycloak admin password is being stored inside the existing secret.
  ##
  passwordSecretKey: ""
  ## @param auth.annotations Additional custom annotations for Keycloak auth secret object
  ##
  annotations: {}
## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy headers
##
production: false
## HTTPS settings
##
## @param tls.enabled Enable TLS in Keycloak
## @param tls.usePemCerts Use PEM certificates as input instead of PKS12/JKS stores
## @param tls.autoGenerated.enabled Enable automatic generation of TLS certificates
## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
## @param tls.autoGenerated.certManager.existingIssuer The name of an existing Issuer to use for generating the certificates (only for `cert-manager` engine)
## @param tls.autoGenerated.certManager.existingIssuerKind Existing Issuer kind, defaults to Issuer (only for `cert-manager` engine)
## @param tls.autoGenerated.certManager.keyAlgorithm Key algorithm for the certificates (only for `cert-manager` engine)
## @param tls.autoGenerated.certManager.keySize Key size for the certificates (only for `cert-manager` engine)
## @param tls.autoGenerated.certManager.duration Duration for the certificates (only for `cert-manager` engine)
## @param tls.autoGenerated.certManager.renewBefore Renewal period for the certificates (only for `cert-manager` engine)
## @param tls.existingSecret The name of an existing Secret containing the TLS certificates for Keycloak replicas
## @param tls.certFilename Certificate filename inside the existing secret (when tls.usePemCerts=true and tls.autoGenerated.enabled=false)
## @param tls.certKeyFilename Certificate key filename inside the existing secret (when tls.usePemCerts=true and tls.autoGenerated.enabled=false)
## @param tls.keystoreFilename Keystore filename inside the existing secret
## @param tls.truststoreFilename Truststore filename inside the existing secret
## @param tls.keystorePassword Password to access the keystore when it's password-protected
## @param tls.truststorePassword Password to access the truststore when it's password-protected
## @param tls.passwordsSecret The name of an existing Secret containing the keystore/truststore passwords (expected keys: `tls-keystore-password` and `tls-truststore-password`)
##
tls:
  enabled: false
  usePemCerts: false
  autoGenerated:
    enabled: true
    engine: helm
    certManager:
      existingIssuer: ""
      existingIssuerKind: ""
      keySize: 2048
      keyAlgorithm: RSA
      duration: 2160h
      renewBefore: 360h
  ## Create this secret following the steps below:
  ## 1) Generate your truststore and keystore files (more info at https://www.keycloak.org/server/enabletls)
  ## 2) Rename your truststore to `keycloak.truststore.jks`
  ## 3) Rename your keystores to `keycloak.keystore.jks`
  ## 4) Run the command below where SECRET_NAME is the name of the secret you want to create:
  ##       kubectl create secret generic SECRET_NAME --from-file=./keycloak.truststore.jks --from-file=./keycloak.keystore.jks
  ## NOTE: If tls.usePemCerts enabled, make sure the PEM key and cert are named 'tls.key' and 'tls.crt' respectively.
  ##
  existingSecret: ""
  certFilename: "tls.crt"
  certKeyFilename: "tls.key"
  keystoreFilename: "keycloak.keystore.jks"
  truststoreFilename: "keycloak.truststore.jks"
  keystorePassword: ""
  truststorePassword: ""
  passwordsSecret: ""
## @param trustedCertsExistingSecret Name of the existing Secret containing the trusted certificates to validate communications with external services
## ref: https://www.keycloak.org/server/keycloak-truststore
##
trustedCertsExistingSecret: ""
## @param adminRealm Name of the admin realm
##
adminRealm: "master"
## @param proxyHeaders Set Keycloak proxy headers
##
proxyHeaders: ""
## @param hostnameStrict Disables dynamically resolving the hostname from request headers (ignored if ingress.enabled is false).
## Should always be set to true in production, unless your reverse proxy overwrites the Host header.
## If enabled, the ingress.hostname option needs to be specified.
##
hostnameStrict: false
## @param httpEnabled Force enabling HTTP endpoint (by default is only enabled if TLS is disabled)
##
httpEnabled: false
## @param httpRelativePath Set the path relative to '/' for serving resources
##
httpRelativePath: "/"
## Keycloak cache configuration
## ref: https://www.keycloak.org/server/caching
## @param cache.enabled Switch to enable or disable the Keycloak distributed cache for kubernetes.
## NOTE: Set to false to use 'local' cache (only supported when replicaCount=1).
## @param cache.stack Cache stack to use
## @param cache.configFile Path to the file from which cache configuration should be loaded from
## @param cache.useHeadlessServiceWithAppVersion Create a headless service used for ispn containing the app version
##
cache:
  enabled: true
  stack: jdbc-ping
  configFile: "cache-ispn.xml"
  useHeadlessServiceWithAppVersion: false
## Keycloak logging configuration
## ref: https://www.keycloak.org/server/logging
## @param logging.output Alternates between the default log output format or json format
## @param logging.level Allowed values as documented: FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL, OFF
##
logging:
  output: default
  level: INFO
## @param configuration Keycloak Configuration. Auto-generated based on other parameters when not specified
## NOTE: This will override configuring Keycloak based on environment variables (including those set by the chart)
## The keycloak.conf is auto-generated based on other parameters when this parameter is not specified
##
## Example:
## configuration: |-
##    foo: bar
##    baz:
##
configuration: ""
## @param existingConfigmap Name of existing ConfigMap with Keycloak configuration
## NOTE: When it's set the configuration parameter is ignored
##
existingConfigmap: ""
## @param extraStartupArgs Extra default startup args
##
extraStartupArgs: ""
## @param initdbScripts Dictionary of initdb scripts
## Specify dictionary of scripts to be run at first boot
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#initializing-a-new-instance
## Example:
## initdbScripts:
##   my_init_script.sh: |
##      #!/bin/bash
##      echo "Do something."
##
initdbScripts: {}
## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
##
initdbScriptsConfigMap: ""
## @param command Override default container command (useful when using custom images)
##
command: []
## @param args Override default container args (useful when using custom images)
##
args: []

## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars
##
extraEnvVarsCM: ""
## @param extraEnvVarsSecret Name of existing Secret containing extra env vars
##
extraEnvVarsSecret: ""
## @param containerPorts.http Keycloak HTTP container port
## @param containerPorts.https Keycloak HTTPS container port
## @param containerPorts.management Keycloak management container port
##
containerPorts:
  http: 8080
  https: 8443
  management: 9000
## @param extraContainerPorts Optionally specify extra list of additional ports for Keycloak container
## e.g:
## extraContainerPorts:
##   - name: myservice
##     containerPort: 9090
##
extraContainerPorts: []
## Keycloak pods' SecurityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enabled Keycloak pods' Security Context
## @param podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
## @param podSecurityContext.sysctls Set kernel settings using the sysctl interface
## @param podSecurityContext.supplementalGroups Set filesystem extra groups
## @param podSecurityContext.fsGroup Set Keycloak pod's Security Context fsGroup
##
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
## Keycloak containers' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled Enabled containers' Security Context
## @param containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
## @param containerSecurityContext.runAsUser Set containers' Security Context runAsUser
## @param containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
## @param containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
## @param containerSecurityContext.privileged Set container's Security Context privileged
## @param containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
## @param containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
## @param containerSecurityContext.capabilities.drop List of capabilities to be dropped
## @param containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
##
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
## Keycloak resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## @param resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).
## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
##
resourcesPreset: "small"
## @param resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi
##
resources: {}
## Configure extra options for Keycloak containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe on Keycloak containers
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
## @param readinessProbe.enabled Enable readinessProbe on Keycloak containers
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## @param startupProbe.enabled Enable startupProbe on Keycloak containers
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 10
  successThreshold: 1
## @param customLivenessProbe Custom Liveness probes for Keycloak
##
customLivenessProbe: {}
## @param customReadinessProbe Custom Readiness probes Keycloak
##
customReadinessProbe: {}
## @param customStartupProbe Custom Startup probes for Keycloak
##
customStartupProbe: {}

## @section Keycloak StatefulSet parameters

## @param replicaCount Number of Keycloak replicas to deploy
##
replicaCount: 1
## @param updateStrategy.type Keycloak StatefulSet type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  ## Can be set to RollingUpdate or OnDelete
  ##
  type: RollingUpdate
## @param revisionHistoryLimitCount Number of controller revisions to keep
##
revisionHistoryLimitCount: 10
## @param minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
##
minReadySeconds: 0
## @param statefulsetAnnotations Optionally add extra annotations on the StatefulSet resource
##
statefulsetAnnotations: {}
## @param automountServiceAccountToken Mount Service Account token in Keycloak pods
##
automountServiceAccountToken: true
## @param hostAliases Deployment pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param podLabels Extra labels for Keycloak pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Annotations for Keycloak pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}
## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
##
topologySpreadConstraints: []
## @param podManagementPolicy Pod management policy for the Keycloak StatefulSet
##
podManagementPolicy: Parallel
## @param priorityClassName Keycloak pods' Priority Class Name
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## @param schedulerName Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param terminationGracePeriodSeconds Seconds Keycloak pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
## @param lifecycleHooks LifecycleHooks to set additional configuration at startup
##
lifecycleHooks: {}
## @param dnsPolicy DNS Policy for pod
## @param dnsConfig DNS Configuration pod
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
##
dnsPolicy: ""
dnsConfig: {}
## @param enableServiceLinks If set to false, disable Kubernetes service links in the pod spec
## Ref: https://kubernetes.io/docs/tutorials/services/connect-applications-service/#accessing-the-service
##
enableServiceLinks: true

## @param initContainers Add additional init containers to the Keycloak pods
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: []
## @param sidecars Add additional sidecar containers to the Keycloak pods
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []

## @section Traffic Exposure Parameters

## Service configuration
##
service:
  ## @param service.type Kubernetes service type
  ##
  type: ClusterIP
  ## @param service.http.enabled Enable http port on service
  ##
  http:
    enabled: true
  ## @param service.ports.http Keycloak service HTTP port
  ## @param service.ports.https Keycloak service HTTPS port
  ##
  ports:
    http: 80
    https: 443
  ## Node ports to expose
  ## @param service.nodePorts.http Node port for HTTP
  ## @param service.nodePorts.https Node port for HTTPS
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    http: ""
    https: ""
  ## @param service.extraPorts Extra port to expose on Keycloak service
  ##
  extraPorts: []
  ## @param service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}
  ## @param service.clusterIP Keycloak service clusterIP IP
  ## e.g:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP loadBalancerIP for the SuiteCRM Service (optional, cloud specific)
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges Address that are allowed when service is LoadBalancer
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## Example:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy Enable client source IP preservation
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for Keycloak service
  ##
  annotations: {}
  ## Headless service properties
  ##
  headless:
    ## @param service.headless.annotations Annotations for the headless service.
    ##
    annotations: {}
    ## @param service.headless.extraPorts Extra ports to expose on Keycloak headless service
    ##
    extraPorts: []
## Keycloak ingress parameters
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for Keycloak
  ##
  enabled: true
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.hostname Default host for the ingress record (evaluated as template)
  ##
  hostname: keycloak.k0li.fr
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (evaluated as template)
  ## Required if you have more than one IngressClass marked as the default for your cluster
  ##
  ingressClassName: ""
  ## @param ingress.controller The ingress controller type. Currently supports `default` and `gce`
  ## leave as `default` for most ingress controllers.
  ## set to `gce` if using the GCE ingress controller
  ##
  controller: default
  ## @param ingress.path Default path for the ingress record
  ##
  path: "{{ .Values.httpRelativePath }}"
  ## @param ingress.servicePort Backend service port to use
  ## Default is http. Alternative is https.
  ##
  servicePort: http
  ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    - traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
  ## @param ingress.labels Additional labels for the Ingress resource.
  ## e.g:
  ## labels:
  ##   app: keycloak
  ##
  labels: {}
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.ingress.hostname .) }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: keycloak.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - keycloak.local
  ##   secretName: keycloak.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## - name: keycloak.local-tls
  ##   key:
  ##   certificate:
  ##
  secrets: []
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: keycloak.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: keycloak
  ##           port:
  ##             name: http
  ##
  extraRules: []
## Network Policy configuration
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
##
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  ##
  enabled: false
  ## @param networkPolicy.allowExternal Don't require server label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## server label will have network access to the ports server is listening
  ## on. When true, server will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true
  ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
  ##
  allowExternalEgress: true
  ## @param networkPolicy.addExternalClientAccess Allow access from pods with client label set to "true". Ignored if `networkPolicy.allowExternal` is true.
  ##
  addExternalClientAccess: true
  ## @param networkPolicy.kubeAPIServerPorts [array] List of possible endpoints to kube-apiserver (limit to your cluster settings to increase security)
  ##
  kubeAPIServerPorts: [443, 6443, 8443]
  ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraIngress:
  ##   - ports:
  ##       - port: 1234
  ##     from:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  extraIngress: []
  ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraEgress:
  ##   - ports:
  ##       - port: 1234
  ##     to:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  ##
  extraEgress: []
  ## @param networkPolicy.ingressPodMatchLabels [object] Labels to match to allow traffic from other pods. Ignored if `networkPolicy.allowExternal` is true.
  ## e.g:
  ## ingressPodMatchLabels:
  ##   my-client: "true"
  #
  ingressPodMatchLabels: {}
  ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
  ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
  ##
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

## @section Other parameters

## ServiceAccount configuration
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  ##
  create: true
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the common.names.fullname template
  ##
  name: ""
  ## @param serviceAccount.annotations Additional Service Account annotations (evaluated as a template)
  ##
  annotations: {}
  ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
  ##
  automountServiceAccountToken: true
  ## @param serviceAccount.extraLabels Additional Service Account labels (evaluated as a template)
  ##
  extraLabels: {}
## Keycloak Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
## @param pdb.create Enable/disable a Pod Disruption Budget creation
## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `pdb.minAvailable` and `pdb.maxUnavailable` are empty.
##
pdb:
  create: true
  minAvailable: ""
  maxUnavailable: ""
## Keycloak Autoscaling configuration
## ref: https://kubernetes.io/docs/concepts/workloads/autoscaling/
##
autoscaling:
  ## @param autoscaling.vpa.enabled Enable VPA for Keycloak pods
  ## @param autoscaling.vpa.annotations Annotations for VPA resource
  ## @param autoscaling.vpa.controlledResources VPA List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
  ## @param autoscaling.vpa.maxAllowed VPA Max allowed resources for the pod
  ## @param autoscaling.vpa.minAllowed VPA Min allowed resources for the pod
  ##
  vpa:
    enabled: false
    annotations: {}
    controlledResources: []
    maxAllowed: {}
    minAllowed: {}
    ## @param autoscaling.vpa.updatePolicy.updateMode Autoscaling update policy
    ## Specifies whether recommended updates are applied when a Pod is started and whether recommended updates are applied during the life of a Pod
    ## Possible values are "Off", "Initial", "Recreate", and "Auto".
    ##
    updatePolicy:
      updateMode: Auto
  ## @param autoscaling.hpa.enabled Enable HPA for Keycloak pods
  ## @param autoscaling.hpa.minReplicas Minimum number of Keycloak replicas
  ## @param autoscaling.hpa.maxReplicas Maximum number of Keycloak replicas
  ## @param autoscaling.hpa.targetCPU Target CPU utilization percentage
  ## @param autoscaling.hpa.targetMemory Target Memory utilization percentage
  ##
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
    ## HPA Scaling Behavior
    ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#configurable-scaling-behavior
    ##
    behavior:
      ## HPA behavior when scaling up
      ## @param autoscaling.hpa.behavior.scaleUp.stabilizationWindowSeconds The number of seconds for which past recommendations should be considered while scaling up
      ## @param autoscaling.hpa.behavior.scaleUp.selectPolicy The priority of policies that the autoscaler will apply when scaling up
      ## @param autoscaling.hpa.behavior.scaleUp.policies [array] HPA scaling policies when scaling up
      ## e.g:
      ## Policy to scale 20% of the pod in 60s
      ## - type: Percent
      ##   value: 20
      ##   periodSeconds: 60
      ##
      scaleUp:
        stabilizationWindowSeconds: 120
        selectPolicy: Max
        policies: []
      ## HPA behavior when scaling down
      ## @param autoscaling.hpa.behavior.scaleDown.stabilizationWindowSeconds The number of seconds for which past recommendations should be considered while scaling down
      ## @param autoscaling.hpa.behavior.scaleDown.selectPolicy The priority of policies that the autoscaler will apply when scaling down
      ## @param autoscaling.hpa.behavior.scaleDown.policies [array] HPA scaling policies when scaling down
      ## e.g:
      ## Policy to scale one pod in 300s
      ## - type: Pods
      ##   value: 1
      ##   periodSeconds: 300
      ##
      scaleDown:
        stabilizationWindowSeconds: 300
        selectPolicy: Max
        policies:
          - type: Pods
            value: 1
            periodSeconds: 300

## @section Metrics parameters

metrics:
  ## @param metrics.enabled Enable exposing Keycloak metrics
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#enabling-metrics
  ##
  enabled: false
  ## Keycloak metrics service parameters
  ##
  service:
    ## @param metrics.service.ports.metrics Metrics service Metrics port
    ##
    ports:
      metrics: 9000
    ## @param metrics.service.annotations [object] Annotations for enabling prometheus to access the metrics endpoints
    ##
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
    ## @param metrics.service.extraPorts [array] Add additional ports to the keycloak metrics service
    ##
    extraPorts: []
  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.annotations Additional custom annotations for the ServiceMonitor
    ##
    annotations: {}
    ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
    ##
    labels: {}
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in Prometheus
    ##
    jobLabel: ""
    ## @param metrics.serviceMonitor.honorLabels honorLabels chooses the metric's labels on collisions with target labels
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.tlsConfig [object] TLS configuration used for scrape endpoints used by Prometheus
    ##
    tlsConfig: {}
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ## e.g:
    ## interval: 10s
    ##
    interval: ""
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ## e.g:
    ## scrapeTimeout: 10s
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.metricRelabelings Specify additional relabeling of metrics
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.relabelings Specify general relabeling
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
    ## selector:
    ##   prometheus: my-prometheus
    ##
    selector: {}
  ## Prometheus Operator alert rules configuration
  ##
  prometheusRule:
    ## @param metrics.prometheusRule.enabled Create PrometheusRule Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.prometheusRule.namespace Namespace which Prometheus is running in
    ##
    namespace: ""
    ## @param metrics.prometheusRule.labels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
    ##
    labels: {}
    ## @param metrics.prometheusRule.groups Groups, containing the alert rules.
    ## Example:
    ##   groups:
    ##     - name: Keycloak
    ##       rules:
    ##         - alert: KeycloakInstanceNotAvailable
    ##           annotations:
    ##             message: "Keycloak instance in namespace {{ `{{` }} $labels.namespace {{ `}}` }} has not been available for the last 5 minutes."
    ##           expr: |
    ##             absent(kube_pod_status_ready{namespace="{{ include "common.names.namespace" . }}", condition="true"} * on (pod) kube_pod_labels{pod=~"{{ include "common.names.fullname" . }}-\\d+", namespace="{{ include "common.names.namespace" . }}"}) != 0
    ##           for: 5m
    ##           labels:
    ##             severity: critical
    groups: []

## @section keycloak-config-cli parameters

## Configuration for keycloak-config-cli
## ref: https://github.com/adorsys/keycloak-config-cli
##
keycloakConfigCli:
  ## @param keycloakConfigCli.enabled Whether to enable keycloak-config-cli job
  ##
  enabled: false
  ## Bitnami keycloak-config-cli image
  ## ref: https://hub.docker.com/r/bitnami/keycloak-config-cli/tags/
  ## @param keycloakConfigCli.image.registry [default: REGISTRY_NAME] keycloak-config-cli container image registry
  ## @param keycloakConfigCli.image.repository [default: REPOSITORY_NAME/keycloak-config-cli] keycloak-config-cli container image repository
  ## @skip keycloakConfigCli.image.tag keycloak-config-cli container image tag
  ## @param keycloakConfigCli.image.digest keycloak-config-cli container image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param keycloakConfigCli.image.pullPolicy keycloak-config-cli container image pull policy
  ## @param keycloakConfigCli.image.pullSecrets keycloak-config-cli container image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 6.4.0-debian-12-r11
    digest: ""
    ## Specify a imagePullPolicy
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param keycloakConfigCli.annotations [object] Annotations for keycloak-config-cli job
  ##
  annotations: {}
  ## @param keycloakConfigCli.command Command for running the container (set to default if not set). Use array form
  ##
  command: []
  ## @param keycloakConfigCli.args Args for running the container (set to default if not set). Use array form
  ##
  args: []
  ## @param keycloakConfigCli.automountServiceAccountToken Mount Service Account token in pod
  ##
  automountServiceAccountToken: true
  ## @param keycloakConfigCli.hostAliases Job pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## Keycloak config CLI resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param keycloakConfigCli.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if keycloakConfigCli.resources is set (keycloakConfigCli.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "small"
  ## @param keycloakConfigCli.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## keycloak-config-cli containers' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param keycloakConfigCli.containerSecurityContext.enabled Enabled keycloak-config-cli Security Context
  ## @param keycloakConfigCli.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param keycloakConfigCli.containerSecurityContext.runAsUser Set keycloak-config-cli Security Context runAsUser
  ## @param keycloakConfigCli.containerSecurityContext.runAsGroup Set keycloak-config-cli Security Context runAsGroup
  ## @param keycloakConfigCli.containerSecurityContext.runAsNonRoot Set keycloak-config-cli Security Context runAsNonRoot
  ## @param keycloakConfigCli.containerSecurityContext.privileged Set keycloak-config-cli Security Context privileged
  ## @param keycloakConfigCli.containerSecurityContext.readOnlyRootFilesystem Set keycloak-config-cli Security Context readOnlyRootFilesystem
  ## @param keycloakConfigCli.containerSecurityContext.allowPrivilegeEscalation Set keycloak-config-cli Security Context allowPrivilegeEscalation
  ## @param keycloakConfigCli.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param keycloakConfigCli.containerSecurityContext.seccompProfile.type Set keycloak-config-cli Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## keycloak-config-cli pods' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param keycloakConfigCli.podSecurityContext.enabled Enabled keycloak-config-cli pods' Security Context
  ## @param keycloakConfigCli.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param keycloakConfigCli.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param keycloakConfigCli.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param keycloakConfigCli.podSecurityContext.fsGroup Set keycloak-config-cli pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## @param keycloakConfigCli.backoffLimit Number of retries before considering a Job as failed
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
  ##
  backoffLimit: 1
  ## @param keycloakConfigCli.podLabels Pod extra labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param keycloakConfigCli.podAnnotations Annotations for job pod
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param keycloakConfigCli.nodeSelector Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ##
  ## @param keycloakConfigCli.tolerations Tolerations for job pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## keycloak-config-cli availability-check configuration
  ## ref: https://github.com/adorsys/keycloak-config-cli#Configuration
  ## @param keycloakConfigCli.availabilityCheck.enabled Whether to wait until Keycloak is available
  ## @param keycloakConfigCli.availabilityCheck.timeout Timeout for the availability check (Default is 120s)
  ##
  availabilityCheck:
    enabled: true
    timeout: ""
  ## @param keycloakConfigCli.extraEnvVars Additional environment variables to set
  ## Example:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param keycloakConfigCli.extraEnvVarsCM ConfigMap with extra environment variables
  ##
  extraEnvVarsCM: ""
  ## @param keycloakConfigCli.extraEnvVarsSecret Secret with extra environment variables
  ##
  extraEnvVarsSecret: ""
  ## @param keycloakConfigCli.extraVolumes Extra volumes to add to the job
  ##
  extraVolumes: []
  ## @param keycloakConfigCli.extraVolumeMounts Extra volume mounts to add to the container
  ##
  extraVolumeMounts: []
  ## @param keycloakConfigCli.initContainers Add additional init containers to the Keycloak config cli pod
  ## Example:
  ## initContainers:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  initContainers: []
  ## @param keycloakConfigCli.sidecars Add additional sidecar containers to the Keycloak config cli pod
  ## Example:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param keycloakConfigCli.configuration keycloak-config-cli realms configuration
  ## NOTE: nil keys will be considered files to import locally
  ## Example:
  ## configuration:
  ##   realm1.json: |
  ##     {
  ##       "realm": "realm1",
  ##       "clients": []
  ##     }
  ##   realm2.yaml: |
  ##     realm: realm2
  ##     clients: []
  ##
  configuration: {}
  ## @param keycloakConfigCli.existingConfigmap ConfigMap with keycloak-config-cli configuration
  ## NOTE: This will override keycloakConfigCli.configuration
  ##
  existingConfigmap: ""
  ## Automatic Cleanup for Finished Jobs
  ## @param keycloakConfigCli.cleanupAfterFinished.enabled Enables Cleanup for Finished Jobs
  ## @param keycloakConfigCli.cleanupAfterFinished.seconds Sets the value of ttlSecondsAfterFinished
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/
  ##
  cleanupAfterFinished:
    enabled: false
    seconds: 600

## @section Default init container parameters

## Default init Containers
##
defaultInitContainers:
  ## 'prepare-write-dirs' init container
  ## Copies writable directories to an empty dir volume in order to not break the application functionality
  ##
  prepareWriteDirs:
    ## @param defaultInitContainers.prepareWriteDirs.enabled Enable init container that copies writable directories to an empty dir
    ##
    enabled: true
    ## Configure "prepare-write-dirs" init-container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.enabled Enabled "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in "prepare-write-dirs" init-containers
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.runAsUser Set runAsUser in "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.runAsGroup Set runAsGroup in "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.runAsNonRoot Set runAsNonRoot in "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.privileged Set privileged in "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.readOnlyRootFilesystem Set readOnlyRootFilesystem in "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.allowPrivilegeEscalation Set allowPrivilegeEscalation in "prepare-write-dirs" init-containers' Security Context
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.capabilities.drop List of capabilities to be dropped in "prepare-write-dirs" init-containers
    ## @param defaultInitContainers.prepareWriteDirs.containerSecurityContext.seccompProfile.type Set seccomp profile in "prepare-write-dirs" init-containers
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## Keycloak "prepare-write-dirs" init container resource requests and limits
    ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param defaultInitContainers.prepareWriteDirs.resourcesPreset Set Keycloak "prepare-write-dirs" init container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if defaultInitContainers.prepareWriteDirs.resources is set (defaultInitContainers.prepareWriteDirs.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param defaultInitContainers.prepareWriteDirs.resources Set Keycloak "prepare-write-dirs" init container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## E.g:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}

## @section Database parameters

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
## @param postgresql.auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
## @param postgresql.auth.username Name for a custom user to create
## @param postgresql.auth.password Password for the custom user to create
## @param postgresql.auth.database Name for a custom database to create
## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
## @param postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
##
postgresql:
  enabled: true
  auth:
    adminUser: su
    adminPassword: su
    postgresPassword: "password"
    username: "user"
    password: "password"
    database: database
    existingSecret: ""
    secretKeys:
      userPasswordKey: password
  architecture: standalone
## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for Keycloak
## @param externalDatabase.password Password for the non-root username for Keycloak
## @param externalDatabase.database Keycloak database name
## @param externalDatabase.schema Keycloak database schema
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretUserKey Name of an existing secret key containing the database user
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
## @param externalDatabase.annotations Additional custom annotations for external database secret object
## @param externalDatabase.extraParams Additional JDBC connection parameters appended to the JDBC URL (KC_DB_URL).
##
externalDatabase:
  host: ""
  port: 5432
  user: bn_keycloak
  database: bitnami_keycloak
  schema: public
  password: ""
  existingSecret: ""
  existingSecretUserKey: ""
  existingSecretPasswordKey: ""
  annotations: {}
  extraParams: ""

extraEnvVars:
  - name: KEYCLOAK_EXTRA_ARGS
    value: "--import-realm"
  - name: KC_HOSTNAME_URL
    value: https://keycloak.127.0.0.1.nip.io
extraVolumes:
  - name: import
    configMap:
      name: impress-keycloak
extraVolumeMounts:
  - name: import
    mountPath: /opt/bitnami/keycloak/data/import/

proxy: edge

extraDeploy:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: impress-keycloak
    data:
      impress.json: |
        {
          "id": "ccf4fd40-4286-474d-854a-4714282a8bec",
          "realm": "impress",
          "notBefore": 0,
          "defaultSignatureAlgorithm": "RS256",
          "revokeRefreshToken": "false",
          "refreshTokenMaxReuse": 0,
          "accessTokenLifespan": 300,
          "accessTokenLifespanForImplicitFlow": 900,
          "ssoSessionIdleTimeout": 1800,
          "ssoSessionMaxLifespan": 36000,
          "ssoSessionIdleTimeoutRememberMe": 0,
          "ssoSessionMaxLifespanRememberMe": 0,
          "offlineSessionIdleTimeout": 2592000,
          "offlineSessionMaxLifespanEnabled": "false",
          "offlineSessionMaxLifespan": 5184000,
          "clientSessionIdleTimeout": 0,
          "clientSessionMaxLifespan": 0,
          "clientOfflineSessionIdleTimeout": 0,
          "clientOfflineSessionMaxLifespan": 0,
          "accessCodeLifespan": 60,
          "accessCodeLifespanUserAction": 300,
          "accessCodeLifespanLogin": 1800,
          "actionTokenGeneratedByAdminLifespan": 43200,
          "actionTokenGeneratedByUserLifespan": 300,
          "oauth2DeviceCodeLifespan": 600,
          "oauth2DevicePollingInterval": 5,
          "enabled": "true",
          "sslRequired": "external",
          "registrationAllowed": "true",
          "registrationEmailAsUsername": "false",
          "rememberMe": "true",
          "verifyEmail": "false",
          "loginWithEmailAllowed": "true",
          "duplicateEmailsAllowed": "false",
          "resetPasswordAllowed": "true",
          "editUsernameAllowed": "false",
          "bruteForceProtected": "false",
          "permanentLockout": "false",
          "maxFailureWaitSeconds": 900,
          "minimumQuickLoginWaitSeconds": 60,
          "waitIncrementSeconds": 60,
          "quickLoginCheckMilliSeconds": 1000,
          "maxDeltaTimeSeconds": 43200,
          "failureFactor": 30,
          "users": [
            {
              "username": "impress",
              "email": "impress@meet.world",
              "firstName": "John",
              "lastName": "Doe",
              "enabled": "true",
              "credentials": [
                {
                  "type": "password",
                  "value": "impress"
                }
              ],
              "realmRoles": ["user"]
            },
            {
              "username": "user-e2e-chromium",
              "email": "user@chromium.test",
              "firstName": "E2E",
              "lastName": "Chromium",
              "enabled": "true",
              "credentials": [
                {
                  "type": "password",
                  "value": "password-e2e-chromium"
                }
              ],
              "realmRoles": ["user"]
            },
            {
              "username": "user-e2e-webkit",
              "email": "user@webkit.test",
              "firstName": "E2E",
              "lastName": "Webkit",
              "enabled": "true",
              "credentials": [
                {
                  "type": "password",
                  "value": "password-e2e-webkit"
                }
              ],
              "realmRoles": ["user"]
            },
            {
              "username": "user-e2e-firefox",
              "email": "user@firefox.test",
              "firstName": "E2E",
              "lastName": "Firefox",
              "enabled": "true",
              "credentials": [
                {
                  "type": "password",
                  "value": "password-e2e-firefox"
                }
              ],
              "realmRoles": ["user"]
            }
          ],
          "roles": {
            "realm": [
              {
                "id": "1f116065-05b6-4269-80a6-c7d904b584b7",
                "name": "uma_authorization",
                "description": "${role_uma_authorization}",
                "composite": "false",
                "clientRole": "false",
                "containerId": "ccf4fd40-4286-474d-854a-4714282a8bec",
                "attributes": {}
              },
              {
                "id": "1bfe401a-08fc-4d94-80e0-86c4f5195f99",
                "name": "default-roles-impress",
                "description": "${role_default-roles}",
                "composite": "true",
                "composites": {
                  "realm": ["offline_access", "uma_authorization"],
                  "client": {
                    "account": ["view-profile", "manage-account"]
                  }
                },
                "clientRole": "false",
                "containerId": "ccf4fd40-4286-474d-854a-4714282a8bec",
                "attributes": {}
              },
              {
                "id": "8733db03-278a-45ad-a25e-c167fbd95b5a",
                "name": "offline_access",
                "description": "${role_offline-access}",
                "composite": "false",
                "clientRole": "false",
                "containerId": "ccf4fd40-4286-474d-854a-4714282a8bec",
                "attributes": {}
              }
            ],
            "client": {
              "realm-management": [
                {
                  "id": "9dcc0883-e2e5-4671-9159-402bdbe73c57",
                  "name": "impersonation",
                  "description": "${role_impersonation}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "ae911be0-ea2e-466d-93e0-f8e73fa8f444",
                  "name": "view-authorization",
                  "description": "${role_view-authorization}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "e777d332-7205-4b76-8b21-9191a2e85a0d",
                  "name": "manage-authorization",
                  "description": "${role_manage-authorization}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "b1a95608-d518-4ede-936e-525ab704d363",
                  "name": "create-client",
                  "description": "${role_create-client}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "ac58976a-ae55-4d92-a864-b33e21b07c54",
                  "name": "view-events",
                  "description": "${role_view-events}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "a149b28f-d252-4ceb-8ba9-8161603c4184",
                  "name": "manage-identity-providers",
                  "description": "${role_manage-identity-providers}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "00a5b886-7ca4-4fba-90c6-a9071e697d86",
                  "name": "manage-clients",
                  "description": "${role_manage-clients}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "b22d5cc1-879e-4405-8345-cc204fd0fec0",
                  "name": "realm-admin",
                  "description": "${role_realm-admin}",
                  "composite": "true",
                  "composites": {
                    "client": {
                      "realm-management": [
                        "impersonation",
                        "view-authorization",
                        "manage-authorization",
                        "create-client",
                        "view-events",
                        "manage-identity-providers",
                        "manage-clients",
                        "view-identity-providers",
                        "query-users",
                        "manage-users",
                        "view-clients",
                        "view-users",
                        "manage-events",
                        "view-realm",
                        "query-realms",
                        "query-groups",
                        "manage-realm",
                        "query-clients"
                      ]
                    }
                  },
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "b3e9faf6-17bf-4f62-abd5-07837806a7e6",
                  "name": "view-identity-providers",
                  "description": "${role_view-identity-providers}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "a8d85f42-023b-48dd-8f49-c9da2b5317ee",
                  "name": "query-users",
                  "description": "${role_query-users}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "eb325a4d-db7a-4f6a-a88b-0ff8aa38b0a5",
                  "name": "manage-users",
                  "description": "${role_manage-users}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "267bb612-62f4-4354-abb2-ac6a34bd854b",
                  "name": "view-clients",
                  "description": "${role_view-clients}",
                  "composite": "true",
                  "composites": {
                    "client": {
                      "realm-management": ["query-clients"]
                    }
                  },
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "b575be2b-e250-4000-b75e-3038cda8c0dd",
                  "name": "manage-events",
                  "description": "${role_manage-events}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "e19cd0bf-8da0-457d-b630-454c611bc1ba",
                  "name": "view-users",
                  "description": "${role_view-users}",
                  "composite": "true",
                  "composites": {
                    "client": {
                      "realm-management": ["query-users", "query-groups"]
                    }
                  },
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "c12145cc-cbdc-4ef3-9774-19b1852811ba",
                  "name": "query-realms",
                  "description": "${role_query-realms}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "e7e15b84-4971-4c13-be93-315bb36d30e1",
                  "name": "view-realm",
                  "description": "${role_view-realm}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "e03d2989-a620-4918-85ed-3eabd0373bb4",
                  "name": "query-groups",
                  "description": "${role_query-groups}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "daf8d347-4b30-41d6-a431-7b3723dd8e6f",
                  "name": "manage-realm",
                  "description": "${role_manage-realm}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                },
                {
                  "id": "432cd3eb-4741-46ba-938a-94ff9dece315",
                  "name": "query-clients",
                  "description": "${role_query-clients}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "0d004a05-7049-452c-83a8-2bae2b5d8015",
                  "attributes": {}
                }
              ],
              "security-admin-console": [],
              "admin-cli": [],
              "account-console": [],
              "broker": [
                {
                  "id": "2e713186-38da-44d7-a5a5-19d91ef2dfca",
                  "name": "read-token",
                  "description": "${role_read-token}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "41dd8f26-46c2-471a-859e-01886f972ff9",
                  "attributes": {}
                }
              ],
              "impress": [],
              "account": [
                {
                  "id": "63b1a4e1-a594-4571-99c3-7c5c3efd61ce",
                  "name": "manage-consent",
                  "description": "${role_manage-consent}",
                  "composite": "true",
                  "composites": {
                    "client": {
                      "account": ["view-consent"]
                    }
                  },
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "36ef5fd6-1167-4ba0-9171-c8cb6cfe904b",
                  "name": "view-groups",
                  "description": "${role_view-groups}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "f984654a-fca5-45d9-bb47-73009eb9bcf0",
                  "name": "view-profile",
                  "description": "${role_view-profile}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "d54168c5-58a5-4f13-9fa8-6dbbee0e4b73",
                  "name": "manage-account",
                  "description": "${role_manage-account}",
                  "composite": "true",
                  "composites": {
                    "client": {
                      "account": ["manage-account-links"]
                    }
                  },
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "092b6808-1ee2-44be-9b5d-085ccd6862b4",
                  "name": "manage-account-links",
                  "description": "${role_manage-account-links}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "ddd57af0-2a5e-4f9d-98e5-ec96c8d852ce",
                  "name": "view-applications",
                  "description": "${role_view-applications}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "84c7324a-4724-41fe-8bd4-848ce5cebd5b",
                  "name": "view-consent",
                  "description": "${role_view-consent}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                },
                {
                  "id": "20d06f75-ea65-4b99-b9ef-2384ffd1de53",
                  "name": "delete-account",
                  "description": "${role_delete-account}",
                  "composite": "false",
                  "clientRole": "true",
                  "containerId": "06721011-1061-4ca7-944f-be2a20719e20",
                  "attributes": {}
                }
              ]
            }
          },
          "groups": [],
          "defaultRole": {
            "id": "1bfe401a-08fc-4d94-80e0-86c4f5195f99",
            "name": "default-roles-impress",
            "description": "${role_default-roles}",
            "composite": "true",
            "clientRole": "false",
            "containerId": "ccf4fd40-4286-474d-854a-4714282a8bec"
          },
          "requiredCredentials": ["password"],
          "otpPolicyType": "totp",
          "otpPolicyAlgorithm": "HmacSHA1",
          "otpPolicyInitialCounter": 0,
          "otpPolicyDigits": 6,
          "otpPolicyLookAheadWindow": 1,
          "otpPolicyPeriod": 30,
          "otpPolicyCodeReusable": "false",
          "otpSupportedApplications": ["totpAppGoogleName", "totpAppFreeOTPName"],
          "webAuthnPolicyRpEntityName": "keycloak",
          "webAuthnPolicySignatureAlgorithms": ["ES256"],
          "webAuthnPolicyRpId": "",
          "webAuthnPolicyAttestationConveyancePreference": "not specified",
          "webAuthnPolicyAuthenticatorAttachment": "not specified",
          "webAuthnPolicyRequireResidentKey": "not specified",
          "webAuthnPolicyUserVerificationRequirement": "not specified",
          "webAuthnPolicyCreateTimeout": 0,
          "webAuthnPolicyAvoidSameAuthenticatorRegister": "false",
          "webAuthnPolicyAcceptableAaguids": [],
          "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
          "webAuthnPolicyPasswordlessSignatureAlgorithms": ["ES256"],
          "webAuthnPolicyPasswordlessRpId": "",
          "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
          "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
          "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
          "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
          "webAuthnPolicyPasswordlessCreateTimeout": 0,
          "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": "false",
          "webAuthnPolicyPasswordlessAcceptableAaguids": [],
          "scopeMappings": [
            {
              "clientScope": "offline_access",
              "roles": ["offline_access"]
            }
          ],
          "clientScopeMappings": {
            "account": [
              {
                "client": "account-console",
                "roles": ["manage-account", "view-groups"]
              }
            ]
          },
          "clients": [
            {
              "id": "06721011-1061-4ca7-944f-be2a20719e20",
              "clientId": "account",
              "name": "${client_account}",
              "rootUrl": "${authBaseUrl}",
              "baseUrl": "/realms/impress/account/",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "redirectUris": ["/realms/impress/account/*"],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": "false",
              "consentRequired": "false",
              "standardFlowEnabled": "true",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "false",
              "serviceAccountsEnabled": "false",
              "publicClient": "true",
              "frontchannelLogout": "false",
              "protocol": "openid-connect",
              "attributes": {
                "post.logout.redirect.uris": "+"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "false",
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "987e14a5-caed-40a6-8bac-8c429b74ca48",
              "clientId": "account-console",
              "name": "${client_account-console}",
              "rootUrl": "${authBaseUrl}",
              "baseUrl": "/realms/impress/account/",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "redirectUris": ["/realms/impress/account/*"],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": "false",
              "consentRequired": "false",
              "standardFlowEnabled": "true",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "false",
              "serviceAccountsEnabled": "false",
              "publicClient": "true",
              "frontchannelLogout": "false",
              "protocol": "openid-connect",
              "attributes": {
                "post.logout.redirect.uris": "+",
                "pkce.code.challenge.method": "S256"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "false",
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "4f958126-eaa1-46d5-967a-3a3c2e2d11f7",
                  "name": "audience resolve",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-resolve-mapper",
                  "consentRequired": "false",
                  "config": {}
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "92da37ad-e8a1-41f1-93c6-541dffa7d601",
              "clientId": "admin-cli",
              "name": "${client_admin-cli}",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": "false",
              "consentRequired": "false",
              "standardFlowEnabled": "false",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "true",
              "serviceAccountsEnabled": "false",
              "publicClient": "true",
              "frontchannelLogout": "false",
              "protocol": "openid-connect",
              "attributes": {
                "post.logout.redirect.uris": "+"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "false",
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "41dd8f26-46c2-471a-859e-01886f972ff9",
              "clientId": "broker",
              "name": "${client_broker}",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": "true",
              "consentRequired": "false",
              "standardFlowEnabled": "true",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "false",
              "serviceAccountsEnabled": "false",
              "publicClient": "false",
              "frontchannelLogout": "false",
              "protocol": "openid-connect",
              "attributes": {
                "post.logout.redirect.uris": "+"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "false",
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "869481d0-5774-4e64-bc30-fedc7c58958f",
              "clientId": "impress",
              "name": "",
              "description": "",
              "rootUrl": "",
              "adminUrl": "",
              "baseUrl": "",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "secret": "ThisIsAnExampleKeyForDevPurposeOnly",
              "redirectUris": [
                "http://localhost:8070/*",
                "http://localhost:8071/*",
                "https://impress.127.0.0.1.nip.io/*",
                "http://localhost:8088/*",
                "http://localhost:3000/*"
              ],
              "webOrigins": [
                "https://impress.127.0.0.1.nip.io",
                "http://localhost:8088",
                "http://localhost:8070",
                "http://localhost:3000"
              ],
              "notBefore": 0,
              "bearerOnly": "false",
              "consentRequired": "false",
              "standardFlowEnabled": "true",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "false",
              "serviceAccountsEnabled": "false",
              "publicClient": "false",
              "frontchannelLogout": "true",
              "protocol": "openid-connect",
              "attributes": {
                "access.token.lifespan": "-1",
                "client.secret.creation.time": "1707820779",
                "user.info.response.signature.alg": "RS256",
                "post.logout.redirect.uris": "http://localhost:8070/*##https://impress.127.0.0.1.nip.io/*##http://localhost:3000/*",
                "oauth2.device.authorization.grant.enabled": "false",
                "use.jwks.url": "false",
                "backchannel.logout.revoke.offline.tokens": "false",
                "use.refresh.tokens": "true",
                "tls-client-certificate-bound-access-tokens": "false",
                "oidc.ciba.grant.enabled": "false",
                "backchannel.logout.session.required": "true",
                "client_credentials.use_refresh_token": "false",
                "acr.loa.map": "{}",
                "require.pushed.authorization.requests": "false",
                "display.on.consent.screen": "false",
                "client.session.idle.timeout": "-1",
                "token.response.type.bearer.lower-case": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "true",
              "nodeReRegistrationTimeout": -1,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "0d004a05-7049-452c-83a8-2bae2b5d8015",
              "clientId": "realm-management",
              "name": "${client_realm-management}",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": "true",
              "consentRequired": "false",
              "standardFlowEnabled": "true",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "false",
              "serviceAccountsEnabled": "false",
              "publicClient": "false",
              "frontchannelLogout": "false",
              "protocol": "openid-connect",
              "attributes": {
                "post.logout.redirect.uris": "+"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "false",
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "2a4e007a-2fc4-4f43-aace-b93aec9221b4",
              "clientId": "security-admin-console",
              "name": "${client_security-admin-console}",
              "rootUrl": "${authAdminUrl}",
              "baseUrl": "/admin/impress/console/",
              "surrogateAuthRequired": "false",
              "enabled": "true",
              "alwaysDisplayInConsole": "false",
              "clientAuthenticatorType": "client-secret",
              "redirectUris": ["/admin/impress/console/*"],
              "webOrigins": ["+"],
              "notBefore": 0,
              "bearerOnly": "false",
              "consentRequired": "false",
              "standardFlowEnabled": "true",
              "implicitFlowEnabled": "false",
              "directAccessGrantsEnabled": "false",
              "serviceAccountsEnabled": "false",
              "publicClient": "true",
              "frontchannelLogout": "false",
              "protocol": "openid-connect",
              "attributes": {
                "post.logout.redirect.uris": "+",
                "pkce.code.challenge.method": "S256"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": "false",
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "4913be96-5827-46a4-9909-562c2dd5bef6",
                  "name": "locale",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "locale",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "locale",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            }
          ],
          "clientScopes": [
            {
              "id": "74aeb8e2-a1b6-4897-9eaf-d922becea170",
              "name": "roles",
              "description": "OpenID Connect scope for add user roles to the access token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${rolesScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "994b8f5e-dfc1-4154-a936-347336e6422a",
                  "name": "client roles",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-client-role-mapper",
                  "consentRequired": "false",
                  "config": {
                    "user.attribute": "foo",
                    "access.token.claim": "true",
                    "claim.name": "resource_access.${client_id}.roles",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                },
                {
                  "id": "d853f97e-80f8-470e-8447-815b289d9ae3",
                  "name": "audience resolve",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-resolve-mapper",
                  "consentRequired": "false",
                  "config": {}
                },
                {
                  "id": "26a9f3ef-cff0-4dee-9fe9-778cd1d2a771",
                  "name": "realm roles",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-realm-role-mapper",
                  "consentRequired": "false",
                  "config": {
                    "user.attribute": "foo",
                    "access.token.claim": "true",
                    "claim.name": "realm_access.roles",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                }
              ]
            },
            {
              "id": "af52ccc3-4ecb-49b4-9a67-5d4172f16070",
              "name": "role_list",
              "description": "SAML role list",
              "protocol": "saml",
              "attributes": {
                "consent.screen.text": "${samlRoleListScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "efb82630-8835-4de0-944e-ac5ea51eca48",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": "false",
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                }
              ]
            },
            {
              "id": "2256189a-7970-4244-b496-64cbba3ce582",
              "name": "acr",
              "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "6d7f8b9e-997e-40f8-bae5-83d2647fbeff",
                  "name": "acr loa level",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-acr-mapper",
                  "consentRequired": "false",
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                }
              ]
            },
            {
              "id": "b83cebb6-f086-48e2-8e5a-9802736342f2",
              "name": "offline_access",
              "description": "OpenID Connect built-in scope: offline_access",
              "protocol": "openid-connect",
              "attributes": {
                "consent.screen.text": "${offlineAccessScopeConsentText}",
                "display.on.consent.screen": "true"
              }
            },
            {
              "id": "b99113c6-ccfb-43d4-acd1-09dd34cdf5bc",
              "name": "address",
              "description": "OpenID Connect built-in scope: address",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${addressScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "696211d7-c434-495f-b3a0-a1b88bebfd6e",
                  "name": "address",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-address-mapper",
                  "consentRequired": "false",
                  "config": {
                    "user.attribute.formatted": "formatted",
                    "user.attribute.country": "country",
                    "user.attribute.postal_code": "postal_code",
                    "userinfo.token.claim": "true",
                    "user.attribute.street": "street",
                    "id.token.claim": "true",
                    "user.attribute.region": "region",
                    "access.token.claim": "true",
                    "user.attribute.locality": "locality"
                  }
                }
              ]
            },
            {
              "id": "16845bd9-5626-4484-b4c5-00af52d8ad8b",
              "name": "web-origins",
              "description": "OpenID Connect scope for add allowed web origins to the access token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "false",
                "consent.screen.text": ""
              },
              "protocolMappers": [
                {
                  "id": "5828a7d9-cdc7-456b-a747-16bf83c2f57d",
                  "name": "allowed web origins",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-allowed-origins-mapper",
                  "consentRequired": "false",
                  "config": {}
                }
              ]
            },
            {
              "id": "ce289e05-eca4-4323-b457-822d39cc6d49",
              "name": "profile",
              "description": "OpenID Connect built-in scope: profile",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${profileScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "abe63488-9a39-4e29-a0a8-824db0887b60",
                  "name": "profile",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "profile",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "profile",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "15690cfb-e14c-46e8-8494-22a0365a4b0c",
                  "name": "gender",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "gender",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "gender",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "03cf0e4c-c2a5-4203-88c4-5391d361ba15",
                  "name": "zoneinfo",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "zoneinfo",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "zoneinfo",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "23b1a1da-2ecc-4db7-8d33-4e9233a81e89",
                  "name": "updated at",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "updatedAt",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "updated_at",
                    "jsonType.label": "long"
                  }
                },
                {
                  "id": "26a72777-56eb-4b46-acca-eca8168e29fc",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "4ae1896b-ea82-4604-8f0e-72133fdee05c",
                  "name": "birthdate",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "birthdate",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "birthdate",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "79712bcf-b7f7-4ca3-b97c-418f48fded9b",
                  "name": "first name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "first_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "6397c5e9-95ea-4c31-bd44-a8acf1d18472",
                  "name": "nickname",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "nickname",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "nickname",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "7f741e96-41fe-4021-bbfd-506e7eb94e69",
                  "name": "last name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "last_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "5ca62964-2d04-4e8e-963d-e3b08cf32d7c",
                  "name": "middle name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "middleName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "middle_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "954a5dff-cc19-4dde-b996-787f767db4cc",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": "false",
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "1eba19bf-6fa1-4608-ad2d-d4346580c93d",
                  "name": "picture",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "picture",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "picture",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "e7bdd267-fcce-451f-b3e1-a775cf611dd2",
                  "name": "website",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "website",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "website",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "a9a8918c-af00-48a5-a8b3-a28a83653f71",
                  "name": "locale",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "locale",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "locale",
                    "jsonType.label": "String"
                  }
                }
              ]
            },
            {
              "id": "cd725067-b6ba-42f1-a940-97a16a23cb85",
              "name": "microprofile-jwt",
              "description": "Microprofile - JWT built-in scope",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "a4e1812c-4093-4666-a6b3-03c5d9b5ca9f",
                  "name": "upn",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "upn",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "d6690292-74d1-48ac-855d-2f0f3799829e",
                  "name": "groups",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-realm-role-mapper",
                  "consentRequired": "false",
                  "config": {
                    "multivalued": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "foo",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "groups",
                    "jsonType.label": "String"
                  }
                }
              ]
            },
            {
              "id": "ce8f1215-0462-4e87-8a3b-18488aee0267",
              "name": "phone",
              "description": "OpenID Connect built-in scope: phone",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${phoneScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "0ce95430-80aa-4dd6-994b-5a67302ba531",
                  "name": "phone number",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "phoneNumber",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "phone_number",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "8da0d3b1-d609-417e-9adc-1de77549baf9",
                  "name": "phone number verified",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "phoneNumberVerified",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "phone_number_verified",
                    "jsonType.label": "boolean"
                  }
                }
              ]
            },
            {
              "id": "f89a9158-7c03-49b0-8a3c-d0b75e2ce1b4",
              "name": "email",
              "description": "OpenID Connect built-in scope: email",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${emailScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "fb109597-e31e-46d7-84c5-62e5fcf32ac8",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "61c135e5-2447-494b-bc70-9612f383be27",
                  "name": "email verified",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": "false",
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "emailVerified",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email_verified",
                    "jsonType.label": "boolean"
                  }
                }
              ]
            }
          ],
          "defaultDefaultClientScopes": [
            "role_list",
            "profile",
            "email",
            "roles",
            "web-origins",
            "acr"
          ],
          "defaultOptionalClientScopes": [
            "offline_access",
            "address",
            "phone",
            "microprofile-jwt"
          ],
          "browserSecurityHeaders": {
            "contentSecurityPolicyReportOnly": "",
            "xContentTypeOptions": "nosniff",
            "xRobotsTag": "none",
            "xFrameOptions": "SAMEORIGIN",
            "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
            "xXSSProtection": "1; mode=block",
            "strictTransportSecurity": "max-age=31536000; includeSubDomains"
          },
          "smtpServer": {},
          "eventsEnabled": "false",
          "eventsListeners": ["jboss-logging"],
          "enabledEventTypes": [],
          "adminEventsEnabled": "false",
          "adminEventsDetailsEnabled": "false",
          "identityProviders": [],
          "identityProviderMappers": [],
          "components": {
            "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
              {
                "id": "74dffa9a-5d4f-4ce3-9708-885212f56861",
                "name": "Consent Required",
                "providerId": "consent-required",
                "subType": "anonymous",
                "subComponents": {},
                "config": {}
              },
              {
                "id": "48096073-ceae-4e68-a15b-f1aa390dcce5",
                "name": "Allowed Client Scopes",
                "providerId": "allowed-client-templates",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "allow-default-scopes": ["true"]
                }
              },
              {
                "id": "51b0e87c-ee04-4664-a299-f8e49cb7a9ac",
                "name": "Max Clients Limit",
                "providerId": "max-clients",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "max-clients": ["200"]
                }
              },
              {
                "id": "6379b091-2289-4fe7-894c-c03f1bd0e69b",
                "name": "Allowed Client Scopes",
                "providerId": "allowed-client-templates",
                "subType": "authenticated",
                "subComponents": {},
                "config": {
                  "allow-default-scopes": ["true"]
                }
              },
              {
                "id": "97ae8320-a439-463b-817e-05bd4a6c39d1",
                "name": "Allowed Protocol Mapper Types",
                "providerId": "allowed-protocol-mappers",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "allowed-protocol-mapper-types": [
                    "saml-role-list-mapper",
                    "oidc-usermodel-attribute-mapper",
                    "saml-user-attribute-mapper",
                    "saml-user-property-mapper",
                    "oidc-sha256-pairwise-sub-mapper",
                    "oidc-full-name-mapper",
                    "oidc-address-mapper",
                    "oidc-usermodel-property-mapper"
                  ]
                }
              },
              {
                "id": "49131ffc-4831-4e3e-a466-f9f08aa1bee0",
                "name": "Full Scope Disabled",
                "providerId": "scope",
                "subType": "anonymous",
                "subComponents": {},
                "config": {}
              },
              {
                "id": "e12647d2-e21f-49bc-a8c6-28154c5544d2",
                "name": "Allowed Protocol Mapper Types",
                "providerId": "allowed-protocol-mappers",
                "subType": "authenticated",
                "subComponents": {},
                "config": {
                  "allowed-protocol-mapper-types": [
                    "saml-user-property-mapper",
                    "saml-user-attribute-mapper",
                    "oidc-address-mapper",
                    "oidc-sha256-pairwise-sub-mapper",
                    "oidc-usermodel-property-mapper",
                    "oidc-full-name-mapper",
                    "saml-role-list-mapper",
                    "oidc-usermodel-attribute-mapper"
                  ]
                }
              },
              {
                "id": "c9f00ef2-00d9-44bd-9b6c-3b3bf57e44ba",
                "name": "Trusted Hosts",
                "providerId": "trusted-hosts",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "host-sending-registration-request-must-match": ["true"],
                  "client-uris-must-match": ["true"]
                }
              }
            ],
            "org.keycloak.userprofile.UserProfileProvider": [
              {
                "id": "96260850-72a5-4b49-b96b-5a33d0b5337d",
                "providerId": "declarative-user-profile",
                "subComponents": {},
                "config": {}
              }
            ],
            "org.keycloak.keys.KeyProvider": [
              {
                "id": "55d93b4d-fe05-46a1-a832-36f380aaddf7",
                "name": "aes-generated",
                "providerId": "aes-generated",
                "subComponents": {},
                "config": {
                  "priority": ["100"]
                }
              },
              {
                "id": "bee288b4-ecdf-4ec4-8c31-ee330f1e8f95",
                "name": "hmac-generated",
                "providerId": "hmac-generated",
                "subComponents": {},
                "config": {
                  "priority": ["100"],
                  "algorithm": ["HS256"]
                }
              },
              {
                "id": "2aa8f54d-8b4b-4eb7-a05b-89211f544358",
                "name": "rsa-enc-generated",
                "providerId": "rsa-enc-generated",
                "subComponents": {},
                "config": {
                  "priority": ["100"],
                  "algorithm": ["RSA-OAEP"]
                }
              },
              {
                "id": "23ad48f4-2275-4a0d-aa0d-1e0691f9c620",
                "name": "rsa-generated",
                "providerId": "rsa-generated",
                "subComponents": {},
                "config": {
                  "priority": ["100"]
                }
              }
            ]
          },
          "internationalizationEnabled": "false",
          "supportedLocales": [],
          "authenticationFlows": [
            {
              "id": "0c349304-21fd-47ff-8dc6-46efb107b7e9",
              "alias": "Account verification options",
              "description": "Method with which to verity the existing account",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "idp-email-verification",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "Verify Existing Account by Re-authentication",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "cf1ed416-7274-4804-88bf-4261b0bacdc6",
              "alias": "Authentication Options",
              "description": "Authentication options.",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "basic-auth",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "basic-auth-otp",
                  "authenticatorFlow": "false",
                  "requirement": "DISABLED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "auth-spnego",
                  "authenticatorFlow": "false",
                  "requirement": "DISABLED",
                  "priority": 30,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "d949f1f1-4622-49ec-b74a-4b8a58c653d2",
              "alias": "Browser - Conditional OTP",
              "description": "Flow to determine if the OTP is required for the authentication",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "auth-otp-form",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "3deb6d9d-2064-410c-af99-b1601cd9b1c4",
              "alias": "Direct Grant - Conditional OTP",
              "description": "Flow to determine if the OTP is required for the authentication",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "direct-grant-validate-otp",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "f777c4be-f7d1-453e-a9d7-a2a235b7975b",
              "alias": "First broker login - Conditional OTP",
              "description": "Flow to determine if the OTP is required for the authentication",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "auth-otp-form",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "1bc12f49-e2ef-42bd-959a-0983e1cd4d65",
              "alias": "Handle Existing Account",
              "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "idp-confirm-link",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "Account verification options",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "324cdcf5-8f31-4768-9db9-63208f182b39",
              "alias": "Reset - Conditional OTP",
              "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "reset-otp",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "23d17138-8ebd-4195-91d3-614094f62070",
              "alias": "User creation or linking",
              "description": "Flow for the existing/non-existing user alternatives",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticatorConfig": "create unique user config",
                  "authenticator": "idp-create-user-if-unique",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "Handle Existing Account",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "61fec72a-bfd2-42e8-95c1-fa0b76c1cd2b",
              "alias": "Verify Existing Account by Re-authentication",
              "description": "Reauthentication of existing account",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "idp-username-password-form",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "CONDITIONAL",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "First broker login - Conditional OTP",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "dc00b9a8-fc37-4591-a1ea-07c7f884d394",
              "alias": "browser",
              "description": "browser based authentication",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "auth-cookie",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "auth-spnego",
                  "authenticatorFlow": "false",
                  "requirement": "DISABLED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "identity-provider-redirector",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 25,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "autheticatorFlow": "true",
                  "flowAlias": "forms",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "4f27245a-49b8-4870-a5e2-f0ea624a792c",
              "alias": "clients",
              "description": "Base authentication for clients",
              "providerId": "client-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "client-secret",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "client-jwt",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "client-secret-jwt",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "client-x509",
                  "authenticatorFlow": "false",
                  "requirement": "ALTERNATIVE",
                  "priority": 40,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "5b2c66e1-7bbf-4707-9db8-244269b68164",
              "alias": "direct grant",
              "description": "OpenID Connect Resource Owner Grant",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "direct-grant-validate-username",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "direct-grant-validate-password",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "CONDITIONAL",
                  "priority": 30,
                  "autheticatorFlow": "true",
                  "flowAlias": "Direct Grant - Conditional OTP",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "4bcddec4-4260-4f4f-a757-3aff9b1d30f3",
              "alias": "docker auth",
              "description": "Used by Docker clients to authenticate against the IDP",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "docker-http-basic-authenticator",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "04a94e38-b7fb-48f6-8d63-5640f835c619",
              "alias": "first broker login",
              "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticatorConfig": "review profile config",
                  "authenticator": "idp-review-profile",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "User creation or linking",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "bfcf5112-96ac-485a-8663-b02ad41af919",
              "alias": "forms",
              "description": "Username, password, otp and other auth forms.",
              "providerId": "basic-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "auth-username-password-form",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "CONDITIONAL",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "Browser - Conditional OTP",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "e262d10d-ad0d-4d18-bc05-3a44f7d21736",
              "alias": "http challenge",
              "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "no-cookie-redirect",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "true",
                  "flowAlias": "Authentication Options",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "b671c4b3-22b6-4aac-a1d1-464a2101767c",
              "alias": "registration",
              "description": "registration flow",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "registration-page-form",
                  "authenticatorFlow": "true",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "true",
                  "flowAlias": "registration form",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "f570e064-0e62-4eae-8087-8b06751b8f33",
              "alias": "registration form",
              "description": "registration form",
              "providerId": "form-flow",
              "topLevel": "false",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "registration-user-creation",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "registration-profile-action",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 40,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "registration-password-action",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 50,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "registration-recaptcha-action",
                  "authenticatorFlow": "false",
                  "requirement": "DISABLED",
                  "priority": 60,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "07124099-1d10-4148-ac06-4b0b700908da",
              "alias": "reset credentials",
              "description": "Reset credentials for a user if they forgot their password or something",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "reset-credentials-choose-user",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "reset-credential-email",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticator": "reset-password",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 30,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                },
                {
                  "authenticatorFlow": "true",
                  "requirement": "CONDITIONAL",
                  "priority": 40,
                  "autheticatorFlow": "true",
                  "flowAlias": "Reset - Conditional OTP",
                  "userSetupAllowed": "false"
                }
              ]
            },
            {
              "id": "0a5fa089-f987-4903-9170-36565edda152",
              "alias": "saml ecp",
              "description": "SAML ECP Profile Authentication Flow",
              "providerId": "basic-flow",
              "topLevel": "true",
              "builtIn": "true",
              "authenticationExecutions": [
                {
                  "authenticator": "http-basic-authenticator",
                  "authenticatorFlow": "false",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": "false",
                  "userSetupAllowed": "false"
                }
              ]
            }
          ],
          "authenticatorConfig": [
            {
              "id": "d2818365-2189-4003-9817-0ad5368e37f3",
              "alias": "create unique user config",
              "config": {
                "require.password.update.after.registration": "false"
              }
            },
            {
              "id": "72508559-0176-4eee-a77e-0795d652be12",
              "alias": "review profile config",
              "config": {
                "update.profile.on.first.login": "missing"
              }
            }
          ],
          "requiredActions": [
            {
              "alias": "CONFIGURE_TOTP",
              "name": "Configure OTP",
              "providerId": "CONFIGURE_TOTP",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 10,
              "config": {}
            },
            {
              "alias": "terms_and_conditions",
              "name": "Terms and Conditions",
              "providerId": "terms_and_conditions",
              "enabled": "false",
              "defaultAction": "false",
              "priority": 20,
              "config": {}
            },
            {
              "alias": "UPDATE_PASSWORD",
              "name": "Update Password",
              "providerId": "UPDATE_PASSWORD",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 30,
              "config": {}
            },
            {
              "alias": "UPDATE_PROFILE",
              "name": "Update Profile",
              "providerId": "UPDATE_PROFILE",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 40,
              "config": {}
            },
            {
              "alias": "VERIFY_EMAIL",
              "name": "Verify Email",
              "providerId": "VERIFY_EMAIL",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 50,
              "config": {}
            },
            {
              "alias": "delete_account",
              "name": "Delete Account",
              "providerId": "delete_account",
              "enabled": "false",
              "defaultAction": "false",
              "priority": 60,
              "config": {}
            },
            {
              "alias": "CONFIGURE_RECOVERY_AUTHN_CODES",
              "name": "Recovery Authentication Codes",
              "providerId": "CONFIGURE_RECOVERY_AUTHN_CODES",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 70,
              "config": {}
            },
            {
              "alias": "UPDATE_EMAIL",
              "name": "Update Email",
              "providerId": "UPDATE_EMAIL",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 70,
              "config": {}
            },
            {
              "alias": "webauthn-register",
              "name": "Webauthn Register",
              "providerId": "webauthn-register",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 70,
              "config": {}
            },
            {
              "alias": "webauthn-register-passwordless",
              "name": "Webauthn Register Passwordless",
              "providerId": "webauthn-register-passwordless",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 80,
              "config": {}
            },
            {
              "alias": "update_user_locale",
              "name": "Update User Locale",
              "providerId": "update_user_locale",
              "enabled": "true",
              "defaultAction": "false",
              "priority": 1000,
              "config": {}
            }
          ],
          "browserFlow": "browser",
          "registrationFlow": "registration",
          "directGrantFlow": "direct grant",
          "resetCredentialsFlow": "reset credentials",
          "clientAuthenticationFlow": "clients",
          "dockerAuthenticationFlow": "docker auth",
          "attributes": {
            "cibaBackchannelTokenDeliveryMode": "poll",
            "cibaExpiresIn": "120",
            "cibaAuthRequestedUserHint": "login_hint",
            "oauth2DeviceCodeLifespan": "600",
            "oauth2DevicePollingInterval": "5",
            "clientOfflineSessionMaxLifespan": "0",
            "clientSessionIdleTimeout": "0",
            "parRequestUriLifespan": "60",
            "clientSessionMaxLifespan": "0",
            "clientOfflineSessionIdleTimeout": "0",
            "cibaInterval": "5",
            "realmReusableOtpCode": "false"
          },
          "keycloakVersion": "20.0.1",
          "userManagedAccessAllowed": "false",
          "clientProfiles": {
            "profiles": []
          },
          "clientPolicies": {
            "policies": []
          }
        }
      
